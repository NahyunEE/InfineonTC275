/**********************************************************************************************************************
 * \file Cpu0_Main.c
 * \copyright Copyright (C) Infineon Technologies AG 2019
 * 
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of 
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and 
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all 
 * derivative works of the Software, unless such copies or derivative works are solely in the form of 
 * machine-executable object code generated by a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE 
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 *********************************************************************************************************************/
#include "Ifx_Types.h"
#include "IfxCpu.h"
#include "IfxScuWdt.h"

//gpio
#define PCn_2_IDX 19
#define PCn_1_IDX 11
#define P2_IDX 2
#define P1_IDX 1
#define PCn_0_IDX 3
#define P0_IDX 0


//ERS - 0
#define EXIS0_IDX 4 //[4:6]
#define FEN0_IDX 8 // [8:8]
#define EIEN0_IDX 11 //[11:11]
#define REN0_IDX 9  //[9:9]
#define LEDN0_IDX 10//[10:10]
#define INP0_IDX 12 //[12:14]

//ERS - 1
#define EXIS1_IDX 20
#define FEN1_IDX 24
#define EIEN1_IDX 27
#define REN1_IDX 25
#define LEDN1_IDX 26
#define INP1_IDX 28

//CPU Setting
#define SRE_IDX 10
#define TOS_IDX 11


//IGCR
#define IGP0_IDX 14



IfxCpu_syncEvent g_cpuSyncEvent = 0;

void initLED();
void initSw();
volatile void initERU1();
volatile void initERU();
void ISR0();
void ISR1();
IFX_INTERRUPT(ISR0,0,0x10); // Compiler_tasking document
IFX_INTERRUPT(ISR1,0,0x20); // ISR1 has high prority
//ISR0 : ISR
//0 :Vector Table Num
//0x01 : Priority


void core0_main(void)
{
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG0 AND SAFETY WATCHDOG ARE DISABLED HERE!!
     * Enable the watchdogs and service them periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
    IfxScuWdt_disableSafetyWatchdog(IfxScuWdt_getSafetyWatchdogPassword());
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
        
    int i=0;

    initERU();
    initERU1();
    initLED();
    initSw();
    while(1)
    {

    }
}

volatile void initERU(){

    //SET EXIS0 [4:6]
    SCU_EICR1.U &= ~(0x7 << EXIS0_IDX);
    SCU_EICR1.U |= 0x1 << EXIS0_IDX;

    //SET FEN0 [8:8]
    //Falling Edge Enable Register
//    SCU_EICR1.U &= ~(0x1 << FEN0_IDX);
//    SCU_EICR1.U |= 1 << FEN0_IDX;

//SET LEDN0[10:10]
//Level Detection Register
 //   SCU_EICR1.U &= ~(0x1 << LEDN0_IDX);
//    SCU_EICR1.U |= 1 << LEDN0_IDX;

    //SET REN0
    //Rising Edge Enable
    SCU_EICR1.U &= ~(0x1 << REN0_IDX);
    SCU_EICR1.U |= 1 << REN0_IDX;
//

    //SET EIEN0
    //Interrupt Enable
    SCU_EICR1.U &= ~(0x1 << EIEN0_IDX);
    SCU_EICR1.U |= 1 << EIEN0_IDX;

    //SET INP0
    //OGU0 Setting
    SCU_EICR1.U &= ~(0x7 << INP0_IDX);
    SCU_EICR1.U |= ~(0x7 << INP0_IDX); // Set Output to OGU0
    ////////////////////////////////////////////
    //SET IGP0
    //Do not consider Pattern Detection
    SCU_IGCR0.U &= ~(0x3 << IGP0_IDX);
    SCU_IGCR0.U |= 0x1 << IGP0_IDX;

    //SET SCUERU0
    //To select CPU0
    SRC_SCU_SCU_ERU0.U &= ~(0xff);

    //SET SRPN
    //SET Request Priority Number
    SRC_SCU_SCU_ERU0.U |= 0x10;

    //SET Service request enable
    SRC_SCU_SCU_ERU0.U |= 1 <<SRE_IDX;

    //SET TOS
    //CPU0 service is initiate
    SRC_SCU_SCU_ERU0.U &= ~(0x3 << TOS_IDX);

}



volatile void initERU1(){

    SCU_EICR1.U &= ~(0x7 << EXIS1_IDX);
    SCU_EICR1.U |= 0x2 << EXIS1_IDX; // Input 2 is selected

    SCU_EICR1.U &= ~(0x1 << REN1_IDX);
    SCU_EICR1.U |= 1 << REN1_IDX; // Rising Edge

    SCU_EICR1.U &= ~(0x1 << EIEN1_IDX);
    SCU_EICR1.U |= 1 << EIEN1_IDX; // Enable Interrupt

    SCU_EICR1.U &= ~(0x7 << INP1_IDX);
    SCU_EICR1.U |= 0x1 <<INP1_IDX; //

    ////////////////////////////////////////////////

    //Select OGU 1
    SCU_IGCR3.U &= ~(0x3 << IGP0_IDX);
    SCU_IGCR3.U |= 0x1 << IGP0_IDX;

    SRC_SCU_SCU_ERU1.U &= ~(0xff);


    SRC_SCU_SCU_ERU1.U |= 0x20;

    SRC_SCU_SCU_ERU1.U |= 1 <<SRE_IDX;

    SRC_SCU_SCU_ERU1.U &= ~(0x3 << TOS_IDX);

}


void ISR0(){
    P10_OUT.U = 0x1 << 1; //red
}

void ISR1(){
    P10_OUT.U = 0x1 << 2; //blue
}




void initLED(){
    P10_IOCR0.U &= ~(0x1F << PCn_2_IDX);
    P10_IOCR0.U |= 0x10 << PCn_2_IDX;

    P10_IOCR0.U &= ~(0x1F << PCn_1_IDX);
    P10_IOCR0.U  |= 0x10 << PCn_1_IDX;

}


void initSw(){
 P02_IOCR0.U &=~(0X1F << PCn_0_IDX);
 P02_IOCR0.U = 0x02 << PCn_0_IDX;
}
